@model OfficeLocationMicroservice.WebUi.Models.OfficeModel
@{
    ViewBag.Title = "Index";
}
<!DOCTYPE HTML>
<head>
    <link href="~/Content/buttonStyle.css" rel="stylesheet"/>
    <link href="~/Content/SharedOfficelocationStyles.css" rel="stylesheet"/>
    <title>Dimensional Investing | Dimensional Fund Advisors</title>
    <link href="/Assets/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>


    <style>
        .card:hover {
            box-shadow: 0 8px 10px 0 #000000, 0 8px 20px 0 #000000;
            box-shadow: 0 8px 10px 0 rgba(0, 0, 0, 0.2), 0 8px 20px 0 rgba(0, 0, 0, 0.19);
        }

        .cardContainer {
            z-index: 10;
            width: 100%;
            height: 100%;
            justify-content: center;
            flex-wrap: wrap;
            display: flex;
        }

        .modal {
            overflow-y: auto;
            padding-right: 0px !important;
        }

        .modal-open {
            overflow: auto;
            padding-right: 0px !important;
            margin-right: 0px !important;
        }

        .navbar-fixed-top {
            padding-right: 0px !important;
            margin-right: 0px !important;
        }

        .invalid { border: 2px solid red; }
    </style>

    <script language="JavaScript" type="text/javascript" src="/Scripts/jquery-1.10.2.js"></script>
    <script language="JavaScript" type="text/javascript" src="/Scripts/jquery-1.10.2.min.js"></script>
</head>

@*style="overflow-y:hidden"*@
<body id="body" style="width: 100%;">

<script>
    $(document).ready(function() {
        var x = "@Model.NotificationFlag";

        if (x === "True") {
            alert("Notifications Sent");
            var url = document.location.href;
            window.history.replaceState({}, "", url.split("?")[0]);
            //gets rid of notificationflag parameter, so
            //that the alert won't appear on reloads of page.
        }
    });

</script>

<div class="myContainer">
<div class="" style="clear: both; width: 80%;">

    <h1 class="headline">Office Locations</h1>
    <div class="headingDiv"></div>

    <button type="submit" class="addButton pull-right" onclick="toggleNewModal();">
        <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Office
    </button>
</div>

<br/>

<div class="cardContainer">
    @{
        var CRLF = @"
";
    }
    @foreach (var office in Model.Offices)
    {
        <div class="card" onclick="toggleModal(@office.OfficeId);">
            <h4>@office.Name</h4>
            <div class="details">
                @Html.Raw(office.Address.Replace(CRLF, "<br/>"))<br/>
                @office.Country <br/>
                Switchboard:
                @office.Switchboard <br/>
                Fax: @office.Fax <br/>
                @office.Operating
            </div>

        </div>
    }
</div>

<div id="modals">

    @using (Html.BeginForm("Save", "OfficeLocation", FormMethod.Post, new {id = "OfficesForm"}))
    {
        for (var i = 0; i < Model.Offices.Length; i++)
        {
            <div class="modal fade" id="modal_@Model.Offices[i].OfficeId" data-backdrop="static" data-keyboard="false">
                <div class="modal-dialog">
                    <div class="modal-content">

                        @Html.HiddenFor(m => m.Offices[i].OfficeId, new {value = @Model.Offices[i].OfficeId})
                        @Html.HiddenFor(m => m.Offices[i].HasChanged,
                            new
                            {
                                id = "HasChanged_" + Model.Offices[i].OfficeId,
                            })
                        <div class="modal-header">
                            <button type="button" class="close" onclick="modalCheck(@Model.Offices[i].OfficeId);">&times;</button>
                            <h4 class="modal-title">Edit</h4>
                        </div>

                        <div class="modal-body">

                            <div class="form-group">
                                <label for="Name_@Model.Offices[i].OfficeId"
                                       id="NameLabel_@Model.Offices[i].OfficeId">
                                    Office <span style='color:red;'>*</span></label>
                                @Html.TextBoxFor(m => m.Offices[i].Name, new
                                {
                                    @placeholder = "Type Office Here",
                                    @class = "form-control",
                                    @rows = "1",
                                    @id = "Name_" + @Model.Offices[i].OfficeId,
                                    @data_original_value = @Model.Offices[i].Name,
                                    @style = "min-width: 100%;",
                                    @readonly = "True"
                                })
                            </div>

                            <div class="form-group">
                                <label for="Address_@Model.Offices[i].OfficeId">Address
                                    <span style='color:red;'>*</span></label>
                                @Html.TextAreaFor(m => m.Offices[i].Address, 3, 100, new
                                {
                                    @placeholder = "Type Address Here",
                                    @class = "form-control",
                                    @id = "Address_" + @Model.Offices[i].OfficeId,
                                    @data_original_value = @Model.Offices[i].Address,
                                    @style = "min-width: 100%;",
                                    @readonly = "True",
                                    @required = "True"
                                })

                                @Html.DropDownListFor(m => m.Offices[i].Country,
                                    new SelectList(Model.Countries, "Name", "Name", Model.Offices[i].Country)
                                    , null, new
                                    {
                                        @class = "form-control",
                                        @id = "Country_" + @Model.Offices[i].OfficeId,
                                        @data_original_value = @Model.Offices[i].Country,
                                        @disabled = "True"
                                    })

                            </div>

                            <div class="form-group">
                                <label for="Switchboard_@Model.Offices[i].OfficeId">Switchboard
                                    <span style='color:red;'>*</span></label>
                                @Html.TextBoxFor(m => m.Offices[i].Switchboard, new
                                {
                                    @placeholder = "Type Switchboard Here",
                                    @class = "form-control",
                                    @rows = "1",
                                    @id = "Switchboard_" + @Model.Offices[i].OfficeId,
                                    @data_original_value = @Model.Offices[i].Switchboard,
                                    @style = "min-width: 100%;",
                                    @readonly = "True"
                                })
                            </div>

                            <div class="form-group">
                                <label for="Fax_@Model.Offices[i].OfficeId">Fax</label>
                                @Html.TextBoxFor(m => m.Offices[i].Fax, new
                                {
                                    @placeholder = "Type Fax Here",
                                    @class = "form-control",
                                    @rows = "1",
                                    @id = "Fax_" + @Model.Offices[i].OfficeId,
                                    @data_original_value = @Model.Offices[i].Fax,
                                    @style = "min-width: 100%;",
                                    @readonly = "True"
                                })
                            </div>

                            <div class="form-group">
                                <label for="Operating_@Model.Offices[i].OfficeId">Operating
                                    <span style='color:red;'>*</span></label>
                                @Html.DropDownListFor(m => m.Offices[i].Operating,
                                    new SelectList(Model.OperatingOptions, "Name", "Name", Model.Offices[i].Operating),
                                    null,
                                    new
                                    {
                                        @class = "form-control",
                                        @id = "Operating_" + @Model.Offices[i].OfficeId,
                                        @data_original_value = @Model.Offices[i].Operating,
                                        @disabled = "True"
                                    })

                            </div>

                            <br/>
                            <span style='color: red;'>* required</span>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-close" onclick="modalCheck(@Model.Offices[i].OfficeId);">Close</button>
                            <button type="button" class="btn btn-office" id="SaveBtn_@Model.Offices[i].OfficeId"
                                    onclick="HasChanged(@Model.Offices[i].OfficeId, OfficesForm)"
                                    style="display: none;">
                                Save Changes
                            </button>
                            <button type="button" class="btn btn-office" id="EditBtn_@Model.Offices[i].OfficeId"
                                    onclick="editmodal(@Model.Offices[i].OfficeId);">
                                Edit
                            </button>
                        </div>


                    </div>
                </div>
            </div>
        }
    }
</div>


<div id="newModal">

    @using (Html.BeginForm("Save", "OfficeLocation", FormMethod.Post, new {id = "newOfficeForm"}))
    {
        <div class="modal fade" id="emptyModals" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">

                    @Html.HiddenFor(m => m.NewOffice.HasChanged, new
                    {
                        id = "HasChanged_newOffice",
                        value = "False"
                    })

                    <div class="modal-header">
                        <button type="button" class="close" onclick="check_newModal();">&times;</button>
                        <h4 class="modal-title">New Item</h4>
                    </div>

                    <div class="modal-body">

                        <div class="form-group">
                            <label for="Name_newOffice">Office
                                <span style='color:red;'>*</span></label>
                            @Html.TextBoxFor(m => m.NewOffice.Name, new
                            {
                                @placeholder = "Type Office Here",
                                @class = "form-control",
                                @rows = "1",
                                @id = "Name_newOffice",
                                @data_original_value = @Model.NewOffice.Name,
                                @style = "min-width: 100%;",
                            })
                        </div>


                        <div class="form-group">
                            <label for="Address_newOffice">Address
                                <span style='color:red;'>*</span></label>
                            @Html.TextAreaFor(m => m.NewOffice.Address, 3, 100, new
                            {
                                @placeholder = "Type Address Here",
                                @class = "form-control",
                                @id = "Address_newOffice",
                                @data_original_value = @Model.NewOffice.Address,
                                @style = "min-width: 100%;",
                                @required = "True"
                            })

                            @Html.DropDownListFor(m => m.NewOffice.Country,
                                new SelectList(Model.Countries, "Name", "Name", string.Empty)
                                , null, new
                                {
                                    @class = "form-control",
                                    @id = "Country_newOffice",
                                    @data_original_value = @Model.NewOffice.Country,
                                })

                        </div>

                        <div class="form-group">
                            <label for="Switchboard_newOffice">Switchboard
                            <span style='color:red;'>*</span></label>
                            @Html.TextBoxFor(m => m.NewOffice.Switchboard, new
                            {
                                @placeholder = "Type Switchboard Here",
                                @class = "form-control",
                                @rows = "1",
                                @id = "Switchboard_newOffice",
                                @data_original_value = @Model.NewOffice.Switchboard,
                                @style = "min-width: 100%;"
                            })
                        </div>

                        <div class="form-group">
                            <label for="Fax_newOffice">Fax</label>
                            @Html.TextBoxFor(m => m.NewOffice.Fax, new
                            {
                                @placeholder = "Type Fax Here",
                                @class = "form-control",
                                @rows = "1",
                                @id = "Fax_newOffice",
                                @data_original_value = @Model.NewOffice.Fax,
                                @style = "min-width: 100%;"
                            })
                        </div>

                        <div class="form-group">
                            <label for="Operating_newOffice">Operating
                                <span style='color:red;'>*</span></label>
                            @Html.DropDownListFor(m => m.NewOffice.Operating,
                                new SelectList(Model.OperatingOptions, "Name", "Name", string.Empty),
                                null,
                                new
                                {
                                    @class = "form-control",
                                    @id = "Operating_newOffice",
                                    @data_original_value = @Model.NewOffice.Operating,
                                })
                        </div>

                        <br/>

                        <span style='color: red;'>* required</span>

                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" onclick="check_newModal();">Close</button>
                        <button onclick="javascript: HasChanged('newOffice', newOfficeForm);"
                                type="button" class="btn btn-office">
                            Save changes
                        </button>
                    </div>


                </div>
            </div>
        </div>
    }
</div>

</div>

<script>

    function HasChanged(x, form) {
        function validate(x) {
            var is_empty = x.val();
            if (is_empty) {
                x.removeClass("invalid").addClass("valid");
            } else {
                x.removeClass("valid").addClass("invalid");
            }
        };

        var Name = $('#Name_' + x.toString());
        var Address = $('#Address_' + x.toString());
        var Country = $('#Country_' + x.toString());
        var Switchboard = $('#Switchboard_' + x.toString());
        var Fax = $('#Fax_' + x.toString());
        var Operating = $('#Operating_' + x.toString());

        validate(Name);
        validate(Address);
        validate(Country);
        validate(Operating);
        validate(Switchboard);

        var errorStr = "";
        var hasError = false;

        if (Name.hasClass("invalid")) {
            errorStr += "Office Name cannot be empty.\n";
            hasError = true;
        }

        if (Address.hasClass("invalid")) {
            errorStr += "Office Address cannot be empty.\n";
            hasError = true;
        }

        if (Country.hasClass("invalid")) {
            errorStr += "Office Country cannot be empty.\n";
            hasError = true;
        }

        if (Operating.hasClass("invalid")) {
            errorStr += "Office Operating cannot be empty.\n";
            hasError = true;
        }

        if (Switchboard.hasClass("invalid")) {
            errorStr += "Office Switchboard cannot be empty.\n";
            hasError = true;
        }

        if (hasError) {
            alert(errorStr);
            return;
        }

        $('#HasChanged_' + x).val("True");

        //Name[0].value is new value
        //Name[0].defaultValue is original
        var contentArray = [Name[0], Address[0], Country[0], Switchboard[0], Fax[0], Operating[0]];
        highlightChanges(contentArray);
        checkIt(x, form);
    }

    function highlightChanges(myArray) {
        for (var i = 0; i < myArray.length; i++) {
            highlight(myArray[i]);
        }
    }

    function checkIt(x, form) {
        setTimeout(function() {
                if (confirm('Are you sure you want to save the highlighted changes?')) {
                    $(form).submit();
                } else {
                    if (x == "newOffice") {
                        $('#emptyModals').modal('hide');

                        resetForm("newOffice");
                    } else {
                        $('#modal_' + x).modal('hide');

                        resetForm(x);
                    }
                }
            },
            1000);
    }

    function highlight(x) {
        if (x.nodeName == "INPUT" || x.nodeName == "TEXTAREA") {
            if (x.value != x.defaultValue) {
                x.style.color = "red";
            }
        } else if (x.nodeName == "SELECT") {
            console.log(x.value);
            console.log(x.innerHTML);
            var html = x.innerHTML;
            var start = html.search("selected");
            var newHtml = html.substring(start, html.length);
            var narrowStart = newHtml.search("value=");
            var narrowEnd = newHtml.search(">");
            var oldValue = newHtml.substring(narrowStart + 7, narrowEnd - 1);
            console.log(oldValue);

            if (x.value != oldValue) {
                x.style.color = "red";
            }

        } else {
            x.style.color = "green";
        }
    }

    function enablebody() {
        $('#body').css({
            'overflow-y': 'auto'
        });
    }

    function disablebody() {
        $('#body').css({
            'overflow-y': 'hidden'
        });
    }

    function check_newModal() {
        if (confirm('Are you sure you want to cancel. You will lose your unsaved changes')) {
            $('#emptyModals').modal('hide');

            resetForm("newOffice");
        }
    }

    function modalCheck(x) {
        if (confirm('Are you sure you want to cancel. You will lose your unsaved changes')) {
            $('#modal_' + x).modal('hide');

            resetForm(x);
        }
    }

    var required = function() {
        var input = $(this);
        var is_empty = input.val();
        if (is_empty) {
            input.removeClass("invalid").addClass("valid");
        } else {
            input.removeClass("valid").addClass("invalid");
        }
    };

    function toggleNewModal() {
        var x = "newOffice";

        var Name = $('#Name_' + x.toString());
        var Address = $('#Address_' + x.toString());
        var Country = $('#Country_' + x.toString());
        var Switchboard = $('#Switchboard_' + x.toString());
        var Fax = $('#Fax_' + x.toString());
        var Operating = $('#Operating_' + x.toString());

        Name.on('input', required);
        Address.on('input', required);
        Country.on('input', required);
        Operating.on('input', required);
        Switchboard.on('input', required);

        Name.on('submit', required);
        Address.on('submit', required);
        Country.on('submit', required);
        Operating.on('submit', required);
        Switchboard.on('input', required);

        Name.attr('readonly', false);

        Address.attr('readonly', false);


        Country.attr('disabled', false);

        Switchboard.attr('readonly', false);

        Fax.attr('readonly', false);

        Operating.attr('disabled', false);

        $('#emptyModals').modal('show');

        enablebody();
    }

    function toggleModal(x) {
        $('#modal_' + x).modal('show');
        enablebody();
    }

    function checkForEmpty(x) {
        console.log(x);
        if (x[0].value === "" || x.value == null) {
            x[0].setCustomValidity('this field cannot be empty');
        } else {
            x[0].setCustomValidity("");
        }
    }

    function editmodal(x) {

        var Name = $('#Name_' + x.toString());
        var Address = $('#Address_' + x.toString());
        var Country = $('#Country_' + x.toString());
        var Switchboard = $('#Switchboard_' + x.toString());
        var Fax = $('#Fax_' + x.toString());
        var Operating = $('#Operating_' + x.toString());

        var SaveBtn = $('#SaveBtn_' + x.toString());
        var EditBtn = $('#EditBtn_' + x.toString());

        Name.on('input', required);
        Address.on('input', required);
        Country.on('input', required);
        Operating.on('input', required);
        Switchboard.on('input', required);

        Name.attr('readonly', false);

        Address.attr('readonly', false);

        Country.attr('disabled', false);

        Switchboard.attr('readonly', false);

        Fax.attr('readonly', false);

        Operating.attr('disabled', false);

        SaveBtn.show();

        EditBtn.hide();
    }


    function resetForm(x) {
        console.log("I was called : " + x);
        var Name = $('#Name_' + x.toString());
        var Address = $('#Address_' + x.toString());
        var Country = $('#Country_' + x.toString());
        var Switchboard = $('#Switchboard_' + x.toString());
        var Fax = $('#Fax_' + x.toString());
        var Operating = $('#Operating_' + x.toString());

        var SaveBtn = $('#SaveBtn_' + x.toString());
        var EditBtn = $('#EditBtn_' + x.toString());

        Name.val(Name.data("original-value"));

        Address.val(Address.data("original-value"));

        Country.val(Country.data("original-value"));

        Switchboard.val(Switchboard.data("original-value"));

        Fax.val(Fax.data("original-value"));

        Operating.val(Operating.data("original-value"));

        Name.attr('readonly', true);

        Address.attr('readonly', true);

        Country.attr('disabled', true);

        Switchboard.attr('readonly', true);

        Fax.attr('readonly', true);

        Operating.attr('disabled', true);

        Name.removeClass('invalid');
        Address.removeClass('invalid');
        Country.removeClass('invalid');
        Operating.removeClass('invalid');
        Switchboard.removeClass('invalid');

        SaveBtn.hide();

        EditBtn.show();
    }

</script>

</body>